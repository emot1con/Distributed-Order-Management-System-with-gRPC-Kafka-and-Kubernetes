networks:
  app-tier:
    driver: bridge

services:
  broker_service:
    container_name: broker_service
    build:
      context: ../broker
      dockerfile: ../broker/Dockerfile
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - user_service
      - kafka
    env_file:
      - ../broker/.env
    networks:
      - app-tier  
  
  user_service:
    container_name: user_service
    build:
      context: ../user
      dockerfile: ../user/Dockerfile
    ports:
      - "50001:50001"
    restart: always
    depends_on:
      - postgres
    env_file:
      - ../user/.env
    networks:
      - app-tier

  product_service:
    container_name: product_service
    build:
      context: ../product
      dockerfile: ../product/Dockerfile
    ports:
      - "40001:40001"
    restart: always
    depends_on:
      - postgres
    env_file:
      - ../product/.env
    networks:
      - app-tier

  order_service:
    container_name: order_service
    build:
      context: ../order
      dockerfile: ../order/Dockerfile
    ports:
      - "30001:30001"
    restart: always
    depends_on:
      - postgres
      - kafka
      - zookeeper
    env_file:
      - ../order/.env
    networks:
      - app-tier

  payment_service:
    container_name: payment_service
    build:
      context: ../payment
      dockerfile: ../payment/Dockerfile
    ports:
      - "60001:60001"
    restart: always
    depends_on:
      - postgres
      - kafka
      - zookeeper
    env_file:
      - ../payment/.env
    networks:
      - app-tier

  migrate:
    image: migrate/migrate
    container_name: migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable",
      "up"
    ]
    env_file:
      - .env
    restart: "no"
    networks:
      - app-tier

  postgres:
    container_name: postgres
    image: postgres:13
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ../user/.env
    networks:
      - app-tier
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: 'confluentinc/cp-kafka:7.4.0'
    container_name: kafka
    networks:
      - app-tier
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    networks:
      - app-tier
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

volumes:
  postgres_data:
